!(function (e, i) {
    angular
        .module("ngCsv.config", [])
        .value("ngCsv.config", { debug: !0 })
        .config([
            "$compileProvider",
            function (e) {
                angular.isDefined(e.urlSanitizationWhitelist)
                    ? e.urlSanitizationWhitelist(
                          /^\s*(https?|ftp|mailto|file|data):/
                      )
                    : e.aHrefSanitizationWhitelist(
                          /^\s*(https?|ftp|mailto|file|data):/
                      );
            },
        ]),
        angular.module("ngCsv.directives", ["ngCsv.services"]),
        angular.module("ngCsv.services", []),
        angular.module("ngCsv", [
            "ngCsv.config",
            "ngCsv.services",
            "ngCsv.directives",
            "ngSanitize",
        ]),
        "undefined" != typeof module &&
            "undefined" != typeof exports &&
            module.exports === exports &&
            (module.exports = "ngCsv"),
        angular.module("ngCsv.services").service("CSV", [
            "$q",
            function (e) {
                var i = {
                    "\\t": "	",
                    "\\b": "\b",
                    "\\v": "\v",
                    "\\f": "\f",
                    "\\r": "\r",
                };
                (this.stringifyField = function (e, i) {
                    return "locale" === i.decimalSep && this.isFloat(e)
                        ? e.toLocaleString()
                        : "." !== i.decimalSep && this.isFloat(e)
                        ? e.toString().replace(".", i.decimalSep)
                        : "string" == typeof e
                        ? ((e = e.replace(/"/g, '""')),
                          (i.quoteStrings ||
                              e.indexOf(",") > -1 ||
                              e.indexOf("\n") > -1 ||
                              e.indexOf("\r") > -1) &&
                              (e = i.txtDelim + e + i.txtDelim),
                          e)
                        : "boolean" == typeof e
                        ? e
                            ? "TRUE"
                            : "FALSE"
                        : e;
                }),
                    (this.isFloat = function (e) {
                        return +e === e && (!isFinite(e) || Boolean(e % 1));
                    }),
                    (this.stringify = function (i, t) {
                        var n = e.defer(),
                            r = this,
                            a = "",
                            l = "",
                            s = e.when(i).then(function (e) {
                                if (!1 === e) n.resolve(!1);
                                else {
                                    angular.isDefined(t.header) &&
                                        t.header &&
                                        ((i = []),
                                        angular.forEach(
                                            t.header,
                                            function (e, i) {
                                                this.push(
                                                    r.stringifyField(e, t)
                                                );
                                            },
                                            i
                                        ),
                                        (l +=
                                            (s = i.join(
                                                t.fieldSep ? t.fieldSep : ","
                                            )) + "\r\n"));
                                    var i,
                                        s,
                                        o,
                                        d,
                                        c = [];
                                    angular.isArray(e)
                                        ? (c = e)
                                        : angular.isFunction(e) && (c = e()),
                                        angular.isDefined(t.label) &&
                                            t.label &&
                                            "boolean" == typeof t.label &&
                                            ((o = []),
                                            angular.forEach(
                                                c[0],
                                                function (e, i) {
                                                    this.push(
                                                        r.stringifyField(i, t)
                                                    );
                                                },
                                                o
                                            ),
                                            (l +=
                                                (d = o.join(
                                                    t.fieldSep
                                                        ? t.fieldSep
                                                        : ","
                                                )) + "\r\n")),
                                        angular.forEach(c, function (e, i) {
                                            var n,
                                                a,
                                                s = angular.copy(c[i]);
                                            a = [];
                                            var o = t.columnOrder
                                                ? t.columnOrder
                                                : s;
                                            angular.forEach(
                                                o,
                                                function (e, i) {
                                                    var n = t.columnOrder
                                                        ? s[e]
                                                        : e;
                                                    this.push(
                                                        r.stringifyField(n, t)
                                                    );
                                                },
                                                a
                                            ),
                                                (n = a.join(
                                                    t.fieldSep
                                                        ? t.fieldSep
                                                        : ","
                                                )),
                                                (l +=
                                                    i < c.length
                                                        ? n + "\r\n"
                                                        : n);
                                        }),
                                        t.addByteOrderMarker && (a += "\uFEFF"),
                                        (a += l),
                                        n.resolve(a);
                                }
                            });
                        return (
                            "function" == typeof s.catch &&
                                s.catch(function (e) {
                                    n.reject(e);
                                }),
                            n.promise
                        );
                    }),
                    (this.isSpecialChar = function (e) {
                        return void 0 !== i[e];
                    }),
                    (this.getSpecialChar = function (e) {
                        return i[e];
                    });
            },
        ]),
        angular.module("ngCsv.directives").directive("ngCsv", [
            "ToastUtil",
            "$log",
            "$parse",
            "$q",
            "CSV",
            "$document",
            "$timeout",
            function (i, t, n, r, a, l, s) {
                let o = !1;
                return {
                    restrict: "AC",
                    scope: {
                        data: "&ngCsv",
                        filename: "@filename",
                        header: "&csvHeader",
                        columnOrder: "&csvColumnOrder",
                        txtDelim: "@textDelimiter",
                        decimalSep: "@decimalSeparator",
                        quoteStrings: "@quoteStrings",
                        fieldSep: "@fieldSeparator",
                        lazyLoad: "@lazyLoad",
                        addByteOrderMarker: "@addBom",
                        ngClick: "&",
                        charset: "@charset",
                        label: "&csvLabel",
                    },
                    controller: [
                        "$scope",
                        "$element",
                        "$attrs",
                        "$transclude",
                        function (e, i, n, l) {
                            (e.csv = ""),
                                (!angular.isDefined(e.lazyLoad) ||
                                    "true" != e.lazyLoad) &&
                                    angular.isArray(e.data) &&
                                    e.$watch(
                                        "data",
                                        function (i) {
                                            e.buildCSV();
                                        },
                                        !0
                                    ),
                                (e.getFilename = function () {
                                    return e.filename || "download.csv";
                                }),
                                (e.buildCSV = function () {
                                    var l,
                                        s = r.defer(),
                                        d = null;
                                    return (
                                        i.addClass(
                                            n.ngCsvLoadingClass ||
                                                "ng-csv-loading"
                                        ),
                                        (d = e.data()),
                                        angular.isFunction(d) && (d = d()),
                                        a
                                            .stringify(
                                                d,
                                                ((l = {
                                                    txtDelim: e.txtDelim
                                                        ? e.txtDelim
                                                        : '"',
                                                    decimalSep: e.decimalSep
                                                        ? e.decimalSep
                                                        : ".",
                                                    quoteStrings:
                                                        e.quoteStrings,
                                                    addByteOrderMarker:
                                                        e.addByteOrderMarker,
                                                }),
                                                angular.isDefined(
                                                    n.csvHeader
                                                ) &&
                                                    (l.header = e.$eval(
                                                        e.header
                                                    )),
                                                angular.isDefined(
                                                    n.csvColumnOrder
                                                ) &&
                                                    (l.columnOrder = e.$eval(
                                                        e.columnOrder
                                                    )),
                                                angular.isDefined(n.csvLabel) &&
                                                    (l.label = e.$eval(
                                                        e.label
                                                    )),
                                                (l.fieldSep = e.fieldSep
                                                    ? e.fieldSep
                                                    : ","),
                                                (l.fieldSep = a.isSpecialChar(
                                                    l.fieldSep
                                                )
                                                    ? a.getSpecialChar(
                                                          l.fieldSep
                                                      )
                                                    : l.fieldSep),
                                                l)
                                            )
                                            .then(function (r) {
                                                !1 === r &&
                                                    (t.debug(
                                                        "Data was returned to ng-csv directive as a strict false value - skipping export."
                                                    ),
                                                    (o = !0)),
                                                    (e.csv = r),
                                                    i.removeClass(
                                                        n.ngCsvLoadingClass ||
                                                            "ng-csv-loading"
                                                    ),
                                                    s.resolve(r);
                                            }),
                                        e.$apply(),
                                        s.promise
                                    );
                                });
                        },
                    ],
                    link: function (t, n, r) {
                        n.bind("click", function (n) {
                            t.buildCSV().then(function (n) {
                                o
                                    ? i.customError("No data to export")
                                    : ((function i() {
                                          var n = t.charset || "utf-8",
                                              r = new Blob([t.csv], {
                                                  type:
                                                      "text/csv;charset=" +
                                                      n +
                                                      ";",
                                              });
                                          if (e.navigator.msSaveOrOpenBlob)
                                              navigator.msSaveBlob(
                                                  r,
                                                  t.getFilename()
                                              );
                                          else {
                                              var a = angular.element(
                                                      '<div data-tap-disabled="true"><a></a></div>'
                                                  ),
                                                  o = angular.element(
                                                      a.children()[0]
                                                  );
                                              o.attr(
                                                  "href",
                                                  e.URL.createObjectURL(r)
                                              ),
                                                  o.attr(
                                                      "download",
                                                      t.getFilename()
                                                  ),
                                                  o.attr("target", "_blank"),
                                                  l.find("body").append(a),
                                                  s(function () {
                                                      o[0].click(), o.remove();
                                                  }, null);
                                          }
                                      })(),
                                      i.customSuccess(
                                          "Data exported successfully"
                                      ));
                            }),
                                t.$apply();
                        });
                    },
                };
            },
        ]);
})(window, document);
